// Code generated by go-bindata.
// sources:
// test.ant
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testAnt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x6a\xc3\x30\x0c\xc6\xef\x79\x8a\x6f\x6c\x87\x0e\x3a\xca\xba\x7f\x60\x46\xe8\x8e\x83\xed\x52\xe8\x03\x38\x89\x9a\x99\x25\x8e\x89\xd4\x43\x19\x7d\xf7\xe1\xd8\xee\xbc\x40\x8f\x9f\x25\xff\xf4\x93\x56\x2b\xc8\x97\x61\x18\x46\x3d\xf4\x3d\x59\xc1\xe6\xfa\xa6\x90\xa3\x23\xec\x98\x46\xfc\x14\x00\x70\x60\x1a\xdf\x1b\xc5\x32\x1a\xdb\x4e\x2f\xd6\xd4\xdf\x56\xf7\x04\x85\xec\xb5\xbf\x87\x82\xb1\x12\xc2\x1a\x0a\xfb\x6e\xd0\x31\x3e\x40\xa1\x1b\x52\xe7\x23\x14\x9a\xe1\x50\x75\x14\xf2\xd3\x8c\xf4\x3c\xcb\x2f\x7f\xf9\x54\x14\xde\x9b\x58\x82\xb4\x04\xdf\xad\xab\xdf\xc6\x96\xa3\xb2\x56\xc9\xa3\xca\x9c\xea\x33\x05\xd9\xea\x9b\xab\x6c\xcb\x0f\xc3\xe2\x4d\x0d\xcb\x6b\x68\x2d\xa7\xea\x7e\x34\x64\x1b\x8e\xe5\x5e\xbb\x58\x5d\x4e\x87\x2a\xbd\x55\xd2\xd8\x92\xeb\x8e\xd1\xa3\xc9\xa6\xfb\x01\x39\x3e\x7c\x4c\x95\x4f\xed\x2e\x81\xb5\x33\x11\xd7\x92\xec\x12\x65\xa1\xfd\xba\x2a\x2d\x7e\x8b\xbb\xf2\x3c\x7d\xde\xbc\xc6\x42\xc3\x9f\x64\x89\x4a\x25\xfe\xff\xff\x21\xaf\x2f\x01\x4f\xc5\x6f\x00\x00\x00\xff\xff\x57\x8e\x82\x1b\x2d\x02\x00\x00")

func testAntBytes() ([]byte, error) {
	return bindataRead(
		_testAnt,
		"test.ant",
	)
}

func testAnt() (*asset, error) {
	bytes, err := testAntBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.ant", size: 557, mode: os.FileMode(493), modTime: time.Unix(1518836438, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test.ant": testAnt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test.ant": &bintree{testAnt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
