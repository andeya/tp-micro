// Code generated by go-bindata.
// sources:
// test.ant
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testAnt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x6b\xdb\x30\x14\x7d\xf7\xaf\x38\xeb\xcb\x16\xd8\xea\xd4\xed\x3a\x30\x25\xd0\xa6\x6c\x0b\xa4\xc3\x64\xe4\xbd\x9a\xa3\x26\x62\xb2\x2c\x24\xf9\x21\x94\xfe\xf7\xa1\x4f\xcb\x4b\xb6\x97\xa0\x7b\xcf\xb9\xf7\x9c\x9c\xeb\xb2\xc4\x56\x53\x85\xc1\xfe\x30\xf1\xd2\x17\xe6\x28\xa9\xef\xbd\x16\x00\xdc\x73\xb5\x43\x0d\x6d\x14\x13\x7b\xdb\x7a\x96\x44\x91\xae\xbe\xb8\xe3\x54\xd4\x98\xd7\x57\xf3\xf9\xe2\xe2\x19\x61\xd7\x6a\xe7\xb7\xad\x1e\xdd\x7c\x59\xe2\x07\x6b\x7f\x0b\xd2\x51\x88\xf0\x70\x40\xea\xa6\xd5\xff\xa4\x3e\x5d\xa1\x06\x13\xe6\xba\xf2\x65\x85\x1a\x2f\xbc\x27\xa9\x71\xed\xf1\xdb\x1b\x5f\xde\x44\x3c\x36\x3e\x27\x11\x5f\xdf\xfe\x55\x7f\x19\xeb\xb7\xa2\x28\x4b\x6c\x64\x7b\xaf\xf6\x1a\x9b\x66\x89\xb6\xef\x3a\x6a\x40\xd4\x5e\xfb\x74\x22\xe8\x03\xba\x9f\x78\x2b\x4b\x3c\x80\x69\xfc\x72\xd5\xc3\x04\x5b\x4e\xfe\xea\xd2\xd2\xda\x77\x59\xc8\x6b\xa6\x0d\x6a\x70\xa6\xcd\x9d\xe7\x2d\x1c\xfa\x55\x31\x2a\x76\x3a\xc0\x1d\x91\x01\xfd\xe8\xe6\x16\xd6\x72\xf4\xb5\xa1\x92\x1f\x83\xb1\xc7\x89\xb8\xa5\xe6\x02\x7e\x34\x22\x4f\x44\xfe\x77\x75\x33\xe8\xc3\xb2\x67\x22\xfb\xdf\xb6\x4c\x0a\x39\xaf\xe1\xe4\x48\x95\xce\xa8\xa1\x33\x95\x3e\x33\x52\x9d\x9d\x39\xeb\x2a\x7c\x6c\xcd\xc0\x39\x9a\xed\x7a\x8d\xb6\x17\x46\xf5\x9c\x53\x55\x10\xc9\x20\x2d\x90\x18\xaf\xf1\x36\xdf\xa8\x71\x21\x28\x6a\x06\x25\x34\xcc\x81\xfa\xaf\xd5\x1a\xbb\x74\xac\x48\xf9\x60\x0f\x8e\x3a\x5e\x7b\x86\x4f\x8b\x94\xf0\xc4\x81\x3e\xa0\xd9\xfe\xfc\x7e\xea\x40\x1f\x46\x46\x72\xb0\x95\x3b\x62\xa8\x0b\x6f\x70\xcf\xd1\xc4\x7b\x8d\xb6\x67\xc2\xdb\x18\x79\xd1\x48\x7e\x83\x59\xc6\x09\x49\xe5\xb4\xec\x04\xb3\x51\x34\x46\x1a\x75\xa5\xaf\x2f\x4f\x77\x55\x67\x96\x55\x5e\xf7\xad\x28\xfe\x04\x00\x00\xff\xff\xd2\xd9\xd8\xd1\x35\x04\x00\x00")

func testAntBytes() ([]byte, error) {
	return bindataRead(
		_testAnt,
		"test.ant",
	)
}

func testAnt() (*asset, error) {
	bytes, err := testAntBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.ant", size: 1077, mode: os.FileMode(493), modTime: time.Unix(1520564332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test.ant": testAnt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test.ant": &bintree{testAnt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
