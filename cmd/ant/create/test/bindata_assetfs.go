// Code generated by go-bindata.
// sources:
// __ant__tpl__.go
// DO NOT EDIT!

package test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var ___ant__tpl__Go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x4f\x6f\xd3\x30\x14\x3f\xdb\x9f\xe2\x69\xa7\xb6\x07\xdc\x49\xd3\x0e\x15\x42\x2a\xe3\x50\xa4\x81\x2a\x5a\xce\x99\x95\xbe\x25\x86\xc4\x36\xcf\xaf\x88\x69\xca\x77\x47\xcf\x5e\x68\x52\x91\x43\x12\xbf\x3f\xbf\x7f\x36\x06\xa2\xad\x7f\xda\x06\xa1\xaa\xb6\x5f\x8f\x55\x75\xdc\x3f\x56\x15\xb8\x04\xdc\x22\x44\x0a\x3f\xb0\x66\x60\xec\x63\x67\x19\xf5\xff\x86\xb5\x36\x46\x0a\xfb\xcf\x55\xb5\xff\xfe\x28\xeb\x84\x8d\x4b\x8c\x04\x72\x06\x0a\x67\x46\xda\xc8\x18\x98\x36\xf4\x58\xfe\x7a\xcb\xad\x39\xb9\xdf\xee\x84\x9a\x5f\x22\x5e\x61\x38\xcf\x48\xcf\xb6\x46\x78\xd5\x6a\x17\x7a\x5c\xac\x12\xd3\xb9\xe6\xd7\x61\x09\x2b\x29\x7c\xc3\xd8\xbd\x68\xf5\xc5\x72\xab\x87\xb9\x8a\xc3\x6e\xae\xe2\xb0\x9b\xab\x48\x6c\xf9\x8a\x34\xaf\xcc\x48\x0f\x6c\x79\xb1\x92\xf7\x96\x9a\xb4\x7c\xe3\x10\x3a\xa8\x83\x67\x0a\x5d\x87\x54\x50\x72\x71\xb6\x6c\x0c\x7c\xca\xde\xa0\xb5\xfe\x24\x83\xaa\x9c\x17\xab\xf2\xcd\x98\xf0\x76\x28\x56\x0a\xc1\x3f\x6b\x20\x59\x01\xe5\x56\x66\xb9\x74\x4a\x12\xc2\xf3\x10\x3c\xa3\x67\xa9\x38\xdf\x80\x31\xc0\xf8\x87\x05\x2a\xaf\x2c\x26\x4a\x84\x11\x4a\xe0\x60\xa3\x03\x4b\x4d\x1a\x55\xe5\xde\x05\x55\x96\xca\xa4\x3f\x69\xa5\xb6\xf0\xdc\x05\xcb\xf7\x77\x97\x4e\x0a\xa4\x95\xfa\x38\x36\xe0\x29\x5a\xb2\xfd\xe6\xe6\x3d\x59\xdf\xe0\x06\xd6\xef\xd6\xb7\x9b\xdb\xb5\x3c\x1f\x6e\x9e\xb4\x1a\x26\x42\x8a\x87\x89\x12\xc2\x74\xee\x78\xd4\x72\x6d\x51\x16\x7f\x9d\x03\x3b\xf4\xac\x95\x7a\xb8\x88\x19\xf4\x32\x47\x36\xde\x11\xc8\xbd\x8e\x81\x17\x7f\x39\x85\x49\x7f\x04\x3d\x26\xb9\xaf\xfb\xbb\x9c\x98\xeb\x31\xb1\xed\x63\xd2\x83\xfe\x1b\x00\x00\xff\xff\xcf\x3f\x7a\x6b\x13\x03\x00\x00")

func __ant__tpl__GoBytes() ([]byte, error) {
	return bindataRead(
		___ant__tpl__Go,
		"__ant__tpl__.go",
	)
}

func __ant__tpl__Go() (*asset, error) {
	bytes, err := __ant__tpl__GoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "__ant__tpl__.go", size: 787, mode: os.FileMode(420), modTime: time.Unix(1521534766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"__ant__tpl__.go": __ant__tpl__Go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"__ant__tpl__.go": &bintree{__ant__tpl__Go, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
